name: "Build & Push"
description: "Build and push images"
inputs:
  VERSION:
    description: "The version for the workflow run"
    required: true

  TAG:
    description: "The tag for the workflow run"
    required: false
    default: ""

  IMAGE_REPOSITORY:
    description: "The tag for the workflow run"
    required: true

  CATALOG_DIR_PATH:
    description: "The catalog directory path"
    required: false
    default: catalog

  RELEASE_BRANCH:
    description: Release branch to push changes
    required: false
    default: main

  OPM_VERSION:
    description: OPM CLI version to use
    default: "v1.50.0"
    required: false
runs:
  using: "composite"
  steps:
    - name: Install CLI tools
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        source: "github"
        opm: ${{ inputs.OPM_VERSION }}

    - name: Build and push controller
      run: make manifests build docker-build docker-push
      shell: bash
      env:
        VERSION: ${{ inputs.VERSION }}
        GIT_TAG: ${{ inputs.TAG }}

    - name: Build and push bundle
      run: make bundle bundle-build bundle-push
      shell: bash
      env:
        VERSION: ${{ inputs.VERSION }}
        GIT_TAG: ${{ inputs.TAG }}

    - name: Render catalog index
      run: make catalog-render
      shell: bash
      env:
        VERSION: ${{ inputs.VERSION }}
        GIT_TAG: ${{ inputs.TAG }}

    # Build and push only if index.yaml have been generated
    - name: Build and push catalog
      id: catalog_build
      if: ${{ hashFiles(format('{0}/**/index.yaml', inputs.CATALOG_DIR_PATH)) != '' }}
      env:
        VERSION: ${{ inputs.VERSION }}
        GIT_TAG: ${{ inputs.TAG }}
      shell: bash
      run: make catalog-build catalog-push

    # Only release when no PR tag is used
    - name: Push latest tag
      if: ${{ inputs.TAG == '' && success() && steps.catalog_build.conclusion == 'success' }}
      uses: anothrNick/github-tag-action@1.75.0
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        WITH_V: true
        RELEASE_BRANCHES: ${{ inputs.RELEASE_BRANCH }}
        DEFAULT_BUMP: patch