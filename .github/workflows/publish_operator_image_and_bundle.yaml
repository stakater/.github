name: OperatorHub Certification

on:
  workflow_call:
    inputs:
      GOLANG_VERSION:
        description: Go version to use
        default: "~1.18"
        required: false
        type: string

      GOLANG_CI_LINT_VERSION:
        description: golang-ci-lint version to use
        default: "v1.50.1"
        required: false
        type: string

      PREFLIGHT_VERSION:
        description: preflight version to use
        default: "v1.4.3"
        required: false
        type: string

      OPERATOR_SDK_VERSION:
        description: OperatorSdk version to use
        default: "v1.26.0"
        required: false
        type: string

      CERTIFICATION_PROJECT_ID:
        description: Certification project ID
        required: true
        type: string
      
      DOCKER_FILE_PATH:
        description: Dockerfile path
        required: true
        type: string
      
      PUBLISH_BUNDLE:
        description: "Publish bundle will publish operator bundle to stakater/certified-operators"
        default: false
        required: false
        type: boolean

    secrets:
      REGISTRY_REDHAT_IO_PULL_SECRET:
        description: "Secret to pull images for RedHat registry images"
        required: true

      OPERATORHUB_USERNAME:
        description: "Username to publish image to OperatorHub registry"
        required: true

      OPERATORHUB_PASSWORD:
        description: "Password to publish image to OperatorHub registry"
        required: true

      OPERATORHUB_REPOSITORY:
        description: "Repository to publish image to OperatorHub registry"
        required: true

      PYXIS_API_TOKEN:
        description: "Pyxis API token to run Preflight"
        required: true

      STAKATER_GITHUB_TOKEN:
        description: "Secret to create branch in stakater/certified-operators repository"
        required: true

      STAKATER_DELIVERY_SLACK_WEBHOOK:
        description: "Secret to send success/failure message to slack"
        required: true

jobs:
  publish-image:
    name: Publish Container Image to Catalog
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check if registry secrets are set
      run: |
        if [ "${{ secrets.OPERATORHUB_USERNAME }}" == "" ] || [ "${{ secrets.OPERATORHUB_PASSWORD }}" == "" ] || [ "${{ secrets.OPERATORHUB_REPOSITORY }}" == "" ]; then
          echo "Required Secrets 'OPERATORHUB_USERNAME' or 'OPERATORHUB_PASSWORD' or 'OPERATORHUB_REPOSITORY' are not set!"
          exit 1
        fi

    - name: Check if registry secrets are set
      run: |
        if [ "${{ secrets.REGISTRY_REDHAT_IO_PULL_SECRET }}" == "" ] || [ "${{ secrets.PYXIS_API_TOKEN }}" == "" ]; then
          echo "Required Secrets 'REGISTRY_REDHAT_IO_PULL_SECRET' or 'PYXIS_API_TOKEN' are not set!"
          exit 1
        fi

    - name: Set up GO
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ inputs.GOLANG_CI_LINT_VERSION }}
        only-new-issues: false
        args: --timeout 10m

    - name: Test
      run: make test

    # Install preflight
    # https://github.com/redhat-actions/openshift-tools-installer#supported-tools

    - name: Install CLI tools from OpenShift Mirror
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        source: "github"
        preflight: ${{ inputs.PREFLIGHT_VERSION }}

    - name: Get latest tag
      id: latest_tag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 1.0.0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # For pulling ubi8/go-toolset
    - name: Login to RedHat Registry
      run: |
        echo ${{ secrets.REGISTRY_REDHAT_IO_PULL_SECRET }} | base64 -d > ~/.docker/config.json
        docker login registry.redhat.io
    
    # For pushing operator image
    - name: Login to Quay Registry
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.OPERATORHUB_USERNAME }}
        password: ${{ secrets.OPERATORHUB_PASSWORD }}

    - name: Generate image repository path
      run: |
        echo IMAGE_REPOSITORY=$(echo quay.io/${{ secrets.OPERATORHUB_REPOSITORY }}) >> $GITHUB_ENV

    # Build and push tag
    - name: Build and push
      id: build_and_push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: |
          VERSION=${{ steps.latest_tag.outputs.tag }}
        cache-to: type=inline
        tags: |
          ${{ env.IMAGE_REPOSITORY }}:${{ steps.latest_tag.outputs.tag }}

    - name: Run Preflight test
      run: |
        preflight check container ${{ env.IMAGE_REPOSITORY }}:${{ steps.latest_tag.outputs.tag }} --pyxis-api-token ${{ secrets.PYXIS_API_TOKEN }} --docker-config ~/.docker/config.json

    - name: Submit Preflight test
      run: |
        rm -r ./artifacts
        preflight check container ${{ env.IMAGE_REPOSITORY }}:${{ steps.latest_tag.outputs.tag }} --pyxis-api-token ${{ secrets.PYXIS_API_TOKEN }} --submit --certification-project-id ${{ inputs.CERTIFICATION_PROJECT_ID }} --docker-config ~/.docker/config.json
        rm -r ./artifacts

    # Build and push "latest" tag
    # latest tag requires submitted preflight results
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: |
          VERSION=${{ steps.latest_tag.outputs.tag }}
        cache-to: type=inline
        tags: |
          ${{ env.IMAGE_REPOSITORY }}:latest
    
    outputs:
      operatorhub_image_digest: ${{ steps.build_and_push.outputs.digest }}
      latest_tag: ${{ steps.latest_tag.outputs.tag }}

  publish-bundle:
    name: Publish Bundle to stakater/certified-operators
    if: ${{ inputs.PUBLISH_BUNDLE }}
    needs: ["publish-image"]
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check if registry secrets are set
      run: |
        if [ "${{ secrets.STAKATER_GITHUB_TOKEN }}" == "" ]; then
          echo "Required Secrets 'STAKATER_GITHUB_TOKEN' is not set!"
          exit 1
        fi

    - name: Set up GO
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Install CLI tools from OpenShift Mirror
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        source: "github"
        operator-sdk: ${{ inputs.OPERATOR_SDK_VERSION }}

    - name: Update Image Digest
      env:
        OPERATORHUB_IMAGE_DIGEST: ${{ needs.publish-image.outputs.operatorhub_image_digest }}
      run: |
        echo ${{ steps.publish-image.outputs.digest }}
        make update-operator-hub-image-digest

    - name: Update Bundle
      run: make bundle

    - name: Clone stakater/certified repository
      uses: GuillaumeFalourd/clone-github-repo-action@v2
      with:
        owner: 'stakater'
        repository: 'certified-operators'
        access-token: ${{ secrets.STAKATER_GITHUB_TOKEN }}

    - name: Push branch
      run: |
        cd certified-operators
        git config --local user.email "github-root@stakater.com"
        git config --local user.name "stakater-github-root"
        git remote add upstream https://github.com/redhat-openshift-ecosystem/certified-operators
        git fetch upstream
        git merge upstream/main
        git push --set-upstream origin main
        git checkout -b mto-${{ needs.publish-image.outputs.latest_tag}}
        mkdir operators/tenant-operator/${{ needs.publish-image.outputs.latest_tag}}
        cp -R ../bundle/manifests operators/tenant-operator/${{ needs.publish-image.outputs.latest_tag}}/manifests
        cp -R ../bundle/metadata operators/tenant-operator/${{ needs.publish-image.outputs.latest_tag}}/metadata
        git add .
        git commit -am "Updated multi-tenant-operator to ${{ needs.publish-image.outputs.latest_tag}}"
        git push --set-upstream origin mto-${{ needs.publish-image.outputs.latest_tag}}

  notify-slack:
    name: Slack notification
    runs-on: ubuntu-latest
    needs: [publish-image, publish-bundle]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always() && (needs.publish-image.result == 'success' && (needs.publish-bundle.result == 'success' || needs.publish-bundle.result == 'skipped'))
      with:
        status: custom
        fields: repo,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "OperatorHub Certification successful :party-parrot:"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Multi Tenant Operator container image successfully published to OperatorHub registry and a branch with operator bundle created in *<https://github.com/stakater/certified-operators/tree/mto-${{ needs.publish-image.outputs.latest_tag}}|stakater/certified-operators>*"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "plain_text",
                  "emoji": true,
                  "text": "Steps to be followed:"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "• Review changes made to bundle \n • Open a pull request in  *<https://github.com/redhat-openshift-ecosystem/certified-operators|redhat-openshift-ecosystem/certified-operators>* \n • Wait for the pipelines to be passed \n • Once pipeline passes, the latest version of Multi Tenant Operator will be available on Operator Cataog"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.STAKATER_DELIVERY_SLACK_WEBHOOK }}

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always() && (needs.publish-image.result != 'success') || (needs.publish-bundle.result != 'success')
      with:
        status: custom
        fields: repo,author,action,eventName,ref,workflow
        custom_payload: |
          {
            attachments: [{
              color: 'danger',
              text: `Multi Tenant Operator image publish and bundle creation part failed while OperatorHub certification`,
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.STAKATER_DELIVERY_SLACK_WEBHOOK }}